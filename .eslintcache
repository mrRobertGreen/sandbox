[{"X:\\projects\\sandbox\\src\\index.tsx":"1","X:\\projects\\sandbox\\src\\reportWebVitals.ts":"2","X:\\projects\\sandbox\\src\\App.tsx":"3","X:\\projects\\sandbox\\src\\controllers\\Router.tsx":"4","X:\\projects\\sandbox\\src\\pages\\Statistics.tsx":"5","X:\\projects\\sandbox\\src\\pages\\Home.tsx":"6","X:\\projects\\sandbox\\src\\pages\\About.tsx":"7","X:\\projects\\sandbox\\src\\components\\atoms\\Loader\\Loader.tsx":"8","X:\\projects\\sandbox\\src\\components\\templates\\Page\\Page.tsx":"9","X:\\projects\\sandbox\\src\\components\\molecules\\InputBox\\InputBox.tsx":"10","X:\\projects\\sandbox\\src\\components\\organisms\\TaskList\\TaskList.tsx":"11","X:\\projects\\sandbox\\src\\components\\organisms\\Header\\Header.tsx":"12","X:\\projects\\sandbox\\src\\components\\atoms\\Input\\Input.tsx":"13","X:\\projects\\sandbox\\src\\components\\molecules\\TaskCard\\TaskCard.tsx":"14","X:\\projects\\sandbox\\src\\components\\atoms\\Button\\Button.tsx":"15","X:\\projects\\sandbox\\src\\components\\atoms\\Checkbox\\Checkbox.tsx":"16","X:\\projects\\sandbox\\src\\components\\molecules\\Navigation\\Navigation.tsx":"17","X:\\projects\\sandbox\\src\\components\\atoms\\Label\\Label.tsx":"18"},{"size":530,"mtime":1610900651498,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1610900651499,"results":"21","hashOfConfig":"20"},{"size":144,"mtime":1610900651480,"results":"22","hashOfConfig":"20"},{"size":652,"mtime":1610900696009,"results":"23","hashOfConfig":"20"},{"size":271,"mtime":1610900696053,"results":"24","hashOfConfig":"20"},{"size":2472,"mtime":1611154675684,"results":"25","hashOfConfig":"20"},{"size":247,"mtime":1610900696024,"results":"26","hashOfConfig":"20"},{"size":250,"mtime":1610900695870,"results":"27","hashOfConfig":"20"},{"size":381,"mtime":1610900695979,"results":"28","hashOfConfig":"20"},{"size":1708,"mtime":1610900651491,"results":"29","hashOfConfig":"20"},{"size":823,"mtime":1611078782877,"results":"30","hashOfConfig":"20"},{"size":305,"mtime":1610900695930,"results":"31","hashOfConfig":"20"},{"size":489,"mtime":1610900651486,"results":"32","hashOfConfig":"20"},{"size":971,"mtime":1610900651492,"results":"33","hashOfConfig":"20"},{"size":631,"mtime":1610900651482,"results":"34","hashOfConfig":"20"},{"size":889,"mtime":1610900651484,"results":"35","hashOfConfig":"20"},{"size":932,"mtime":1610900695898,"results":"36","hashOfConfig":"20"},{"size":607,"mtime":1610900651488,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"tg8qz6",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"X:\\projects\\sandbox\\src\\index.tsx",[],["84","85"],"X:\\projects\\sandbox\\src\\reportWebVitals.ts",[],"X:\\projects\\sandbox\\src\\App.tsx",[],"X:\\projects\\sandbox\\src\\controllers\\Router.tsx",["86"],"import React, {FC} from \"react\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {About} from \"../pages/About\";\r\nimport {Statistics} from \"../pages/Statistics\";\r\nimport {Home} from \"../pages/Home\";\r\n\r\nconst Router: FC = ({}) => {\r\n   return (\r\n      <BrowserRouter>\r\n         <Switch>\r\n            <Route path={\"/home\"} component={Home}/>\r\n            <Route path={\"/about\"} component={About}/>\r\n            <Route path={\"/statistics\"} component={Statistics}/>\r\n            <Route path={\"/\"} component={() => <Redirect to={\"/about\"}/>}/>\r\n         </Switch>\r\n      </BrowserRouter>\r\n   )\r\n}\r\n\r\nexport {\r\n   Router\r\n}\r\n","X:\\projects\\sandbox\\src\\pages\\Statistics.tsx",["87"],"import React, {FC} from \"react\";\r\nimport {Page} from \"../components/templates/Page/Page\";\r\n\r\ntype PropsT = {\r\n\r\n}\r\n\r\nconst Statistics: FC<PropsT> = ({}) => {\r\n    return (\r\n        <Page>\r\n            Statistics\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport {\r\n    Statistics\r\n}\r\n","X:\\projects\\sandbox\\src\\pages\\Home.tsx",["88","89","90","91"],"import React, {FC, useCallback, useEffect, useState} from \"react\";\r\nimport axios from 'axios'\r\nimport {Page} from \"../components/templates/Page/Page\";\r\nimport {InputBox} from \"../components/molecules/InputBox/InputBox\";\r\nimport {TaskList, TaskListPropsT} from \"../components/organisms/TaskList/TaskList\";\r\nimport Loadable from 'react-loadable';\r\nimport {Loader} from \"../components/atoms/Loader/Loader\";\r\nimport {TaskT} from \"../../server/types\";\r\n\r\ntype PropsT = {}\r\n\r\nconst loadableTaskListOptions: LoadableExport.OptionsWithRender<TaskListPropsT, any> = {\r\n   loader: () => import(\"../components/organisms/TaskList/TaskList\"),\r\n   loading: Loader,\r\n   render(loaded: any, props: TaskListPropsT): React.ReactNode {\r\n      const TaskList = loaded.TaskList\r\n      return <TaskList {...props}/>\r\n   }\r\n}\r\n\r\nconst LoadableTaskList = Loadable(loadableTaskListOptions)\r\n\r\n/*\r\n* Большие списки? Не беда! Пошли вон либы типа react-virtualized!\r\n* Мы используем более современные решения, а именно INFINITY SCROLL!!!\r\n* Отсутствие костылей, отличная производительность, модное и современное решение!\r\n* */\r\n\r\nconst Home: FC<PropsT> = ({}) => {\r\n\r\n   const [tasks, setTasks] = useState<TaskT[]>([])\r\n\r\n   useEffect(() => {\r\n      axios.get('/api/tasks/get')\r\n          .then(res => {\r\n             if (res.data.success) {\r\n                setTasks(res.data.data)\r\n             }\r\n          })\r\n   }, [])\r\n\r\n   const addTask = useCallback((text: string) => {\r\n      const task: TaskT = {\r\n         text: text,\r\n         isCompleted: false,\r\n         id: Date.now(),\r\n      }\r\n      setTasks(tasks => [...tasks, task])\r\n   }, [])\r\n\r\n   const changeTaskStatus = useCallback((id: number, isCompleted: boolean) => {\r\n      setTasks(tasks => tasks.map(t => {\r\n         if (t.id === id) {\r\n            return {...t, isCompleted: isCompleted}\r\n         }\r\n         else return t\r\n      }))\r\n   }, [tasks])\r\n\r\n   return (\r\n      <Page>\r\n         <InputBox addTask={addTask}/>\r\n         <LoadableTaskList tasks={tasks} changeTaskStatus={changeTaskStatus}/>\r\n      </Page>\r\n   )\r\n}\r\n\r\nconst createFakeTasks = () => {\r\n   let res: TaskT[] = []\r\n   for (let i = 0; i < 100; i++) {\r\n      res = [...res, {\r\n         text: \"task \" + (i + 1),\r\n         isCompleted: false,\r\n         id: i,\r\n      }]\r\n   }\r\n   return res\r\n}\r\n\r\nexport {\r\n   Home,\r\n}\r\n","X:\\projects\\sandbox\\src\\pages\\About.tsx",["92"],"import React, {FC} from \"react\";\r\nimport {Page} from \"../components/templates/Page/Page\";\r\n\r\ntype PropsT = {}\r\n\r\nconst About: FC<PropsT> = ({}) => {\r\n   return (\r\n      <Page>\r\n         About page\r\n      </Page>\r\n   )\r\n}\r\n\r\nexport {\r\n   About\r\n}\r\n","X:\\projects\\sandbox\\src\\components\\atoms\\Loader\\Loader.tsx",["93"],"import React, {FC} from \"react\";\r\nimport \"./styles.scss\"\r\n\r\ntype LoaderPropsT = {}\r\n\r\nconst Loader: FC<LoaderPropsT> = ({}) => {\r\n   return (\r\n      <div className={`loader`}>\r\n            Loading...\r\n      </div>\r\n   )\r\n}\r\n\r\nexport {\r\n   Loader\r\n}\r\n","X:\\projects\\sandbox\\src\\components\\templates\\Page\\Page.tsx",[],"X:\\projects\\sandbox\\src\\components\\molecules\\InputBox\\InputBox.tsx",["94"],"import React, {FC, memo} from \"react\";\r\nimport \"./styles.scss\"\r\nimport { useForm } from \"react-hook-form\";\r\nimport {Input} from \"../../atoms/Input/Input\";\r\nimport {Button} from \"../../atoms/Button/Button\";\r\n\r\ntype PropsT = {\r\n   addTask: (text: string) => void\r\n}\r\ntype FormDataT = {\r\n   text: string\r\n}\r\n\r\n/*\r\n* Про произвожительность и перерисовки\r\n* По умолчанию в React, изменение пропсов или состояния у компонента приводит к перерисовке\r\n* всех его дочерних компонентов. В некоторых случаях, это не требуется. Тогда мы оборачиваем\r\n* дочерний компонент в HOC React.memo() для того, чтобы перед рендернигом React делал поверхностное\r\n* сравнение предыдущих и текущих пропсов и в случае равенства не выполнял перерисовку.\r\n* */\r\n\r\nlet InputBox: FC<PropsT> = React.memo(({addTask}) => {\r\n\r\n   const { register, handleSubmit, reset} = useForm<FormDataT>();\r\n\r\n   const onSubmit = handleSubmit(({text}) => {\r\n      addTask(text)\r\n      reset()\r\n   })\r\n\r\n   return (\r\n      <form className={\"input-box\"} onSubmit={onSubmit}>\r\n         <div className=\"input-box__input\" >\r\n            <Input name={\"text\"} inputRef={register({\r\n               required: true,\r\n            })}/>\r\n         </div>\r\n         <div className=\"input-box__button\">\r\n            <Button type={\"submit\"}>\r\n               Create\r\n            </Button>\r\n         </div>\r\n      </form>\r\n   )\r\n})\r\n\r\nexport {\r\n   InputBox\r\n}","X:\\projects\\sandbox\\src\\components\\organisms\\TaskList\\TaskList.tsx",[],"X:\\projects\\sandbox\\src\\components\\organisms\\Header\\Header.tsx",["95"],"import React, {FC} from \"react\";\r\nimport \"./styles.scss\"\r\nimport {Navigation} from \"../../molecules/Navigation/Navigation\";\r\n\r\ntype PropsT = {}\r\n\r\nconst Header: FC<PropsT> = ({}) => {\r\n   return (\r\n      <div className={\"header\"}>\r\n         <Navigation/>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport {\r\n   Header\r\n}\r\n","X:\\projects\\sandbox\\src\\components\\atoms\\Input\\Input.tsx",[],"X:\\projects\\sandbox\\src\\components\\molecules\\TaskCard\\TaskCard.tsx",[],"X:\\projects\\sandbox\\src\\components\\atoms\\Button\\Button.tsx",[],"X:\\projects\\sandbox\\src\\components\\atoms\\Checkbox\\Checkbox.tsx",[],["96","97"],"X:\\projects\\sandbox\\src\\components\\molecules\\Navigation\\Navigation.tsx",["98"],"import React, {FC} from \"react\";\r\nimport \"./styles.scss\"\r\nimport {Label} from \"../../atoms/Label/Label\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ntype PropsT = {}\r\n\r\nconst Navigation: FC<PropsT> = ({}) => {\r\n   return (\r\n      <div className={`nav`}>\r\n         <div className=\"nav__item\">\r\n            <Link to={\"/home\"}>\r\n               <Label size={\"large\"}>\r\n                  Домой\r\n               </Label>\r\n            </Link>\r\n         </div>\r\n         <div className=\"nav__item\">\r\n            <Link to={\"/statistics\"}>\r\n               <Label size={\"large\"}>\r\n                  Статистика\r\n               </Label>\r\n            </Link>\r\n         </div>\r\n         <div className=\"nav__item\">\r\n            <Link to={\"/about\"}>\r\n               <Label size={\"large\"}>\r\n                  О нас\r\n               </Label>\r\n            </Link>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport {\r\n   Navigation\r\n}\r\n","X:\\projects\\sandbox\\src\\components\\atoms\\Label\\Label.tsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":7,"column":21,"nodeType":"105","messageId":"106","endLine":7,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":8,"column":33,"nodeType":"105","messageId":"106","endLine":8,"endColumn":35},{"ruleId":"107","severity":1,"message":"108","line":5,"column":9,"nodeType":"109","messageId":"110","endLine":5,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":29,"column":27,"nodeType":"105","messageId":"106","endLine":29,"endColumn":29},{"ruleId":"111","severity":1,"message":"112","line":58,"column":7,"nodeType":"113","endLine":58,"endColumn":14,"suggestions":"114"},{"ruleId":"107","severity":1,"message":"115","line":68,"column":7,"nodeType":"109","messageId":"110","endLine":68,"endColumn":22},{"ruleId":"103","severity":1,"message":"104","line":6,"column":28,"nodeType":"105","messageId":"106","endLine":6,"endColumn":30},{"ruleId":"103","severity":1,"message":"104","line":6,"column":35,"nodeType":"105","messageId":"106","endLine":6,"endColumn":37},{"ruleId":"107","severity":1,"message":"116","line":1,"column":20,"nodeType":"109","messageId":"110","endLine":1,"endColumn":24},{"ruleId":"103","severity":1,"message":"104","line":7,"column":29,"nodeType":"105","messageId":"106","endLine":7,"endColumn":31},{"ruleId":"99","replacedBy":"117"},{"ruleId":"101","replacedBy":"118"},{"ruleId":"103","severity":1,"message":"104","line":8,"column":33,"nodeType":"105","messageId":"106","endLine":8,"endColumn":35},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","@typescript-eslint/no-unused-vars","'TaskList' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'tasks'. Either exclude it or remove the dependency array.","ArrayExpression",["121"],"'createFakeTasks' is assigned a value but never used.","'memo' is defined but never used.",["119"],["120"],"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: []",{"range":"124","text":"125"},[1881,1888],"[]"]